#version 460 core

layout(local_size_x = 1024) in;

layout(std430, binding = 0) readonly buffer block0
{
    vec4 in_positions[];
};

layout(std430, binding = 1) readonly buffer block1
{
    vec4 in_velocities[];
};

layout(std430, binding = 2) writeonly buffer block2
{
    vec4 out_positions[];
};

struct Boundary
{
    vec3 low;
    vec3 high;
};

uniform vec3 u_gravity;
uniform float u_deltaTime;
uniform Boundary u_boundary;
uniform float u_damping;

void main()
{
    uint id = gl_GlobalInvocationID.x;
    vec3 velocity = in_velocities[id].xyz + u_gravity * u_deltaTime;
    // vec3 velocity = u_gravity * u_deltaTime;
    vec3 position = in_positions[id].xyz + velocity * u_deltaTime;

    // collision detection
    if (position.x < u_boundary.low.x)
    {
        position.x = u_boundary.low.x + u_damping * (u_boundary.low.x - position.x) + 1e-3;
    }
    if (position.x >= u_boundary.high.x)
    {
        position.x = u_boundary.high.x - u_damping * (position.x - u_boundary.high.x) - 1e-3;
    }
    if (position.y <= u_boundary.low.y)
    {
        position.y = u_boundary.low.y + u_damping * (u_boundary.low.y - position.y) + 1e-3;
    }
    if (position.y >= u_boundary.high.y)
    {
        position.y = u_boundary.high.y - u_damping * (position.y - u_boundary.high.y) - 1e-3;
    }
    if (position.z <= u_boundary.low.z)
    {
        position.z = u_boundary.low.z + u_damping * (u_boundary.low.z - position.z) + 1e-3;
    }
    if (position.z >= u_boundary.high.z)
    {
        position.z = u_boundary.high.z - u_damping * (position.z - u_boundary.high.z) - 1e-3;
    }

    // output
    out_positions[id].xyz = position;
}