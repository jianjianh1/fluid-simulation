#version 460 core

layout(local_size_x = 1024) in;

layout(std430, binding = 0) coherent readonly buffer block0
{
    vec4 in_positions[];
};

layout(std430, binding = 1) writeonly buffer block1
{
    float out_lambdas[];
};

layout(std430, binding = 2) writeonly buffer block2
{
    float out_densities[];
};

layout(std430, binding = 3) coherent readonly buffer block3
{
    uint in_prefixSums[];
};

float poly6(vec3 rvec, float h)
{
    const float coeff = 1.5666814710608448; // 315 / (64 * PI)
    float r = min(h, length(rvec));
    return coeff * pow(h * h - r * r, 3) / pow(h, 9);
}

vec3 gradSpiky(vec3 rvec, float h)
{
    const float coeff = 4.7746482927568605; // 15 / PI
    float r = length(rvec);
    vec3 rNormalized = rvec / r;
    r = min(h, r);
    return -3.0 * coeff * pow(h - r, 2) * rNormalized / pow(h, 6);
}

struct Boundary
{
    vec3 low;
    vec3 high;
};

uniform Boundary u_boundary;
uniform uvec3 u_gridResolution;

ivec3 cellIdVec(vec3 position)
{
    const vec3 diagonal = u_boundary.high - u_boundary.low;
    vec3 cellSize = diagonal / u_gridResolution;
    return ivec3((position - u_boundary.low) / cellSize);
}

uniform float u_mass;
uniform float u_restDensity;
uniform float u_radius;

void main()
{
    uint id = gl_GlobalInvocationID.x;
    vec3 position = in_positions[id].xyz;
    ivec3 cellIdV = cellIdVec(position);

    float density = 0.0;
    vec3 derivThisConstraint = vec3(0.0);
    float sumSquareDerivOtherConstraint = 0.0;
    for (int i = max(0, cellIdV.x - 1); i < cellIdV.x + 2; i++)
    {
        for (int j = max(0, cellIdV.y - 1); j < cellIdV.y + 2; j++)
        {
            for (int k = max(0, cellIdV.z - 1); k < cellIdV.z + 2; k++)
            {
                uint cellIdx = i + u_gridResolution.x * j + u_gridResolution.x * u_gridResolution.y * k;
                uint start = cellIdx == 0 ? 0 : in_prefixSums[cellIdx - 1];
                uint end = in_prefixSums[cellIdx];
                for (uint particleIdx = start; particleIdx < end; particleIdx++)
                {
                    if (id == particleIdx) continue;
                    vec3 otherPosition = in_positions[particleIdx].xyz;
                    vec3 diff = position - otherPosition;
                    density += u_mass * poly6(diff, u_radius);
                    vec3 grad = gradSpiky(diff, u_radius);
                    derivThisConstraint += u_mass * grad / u_restDensity;
                    vec3 derivOtherConstraint = -u_mass * grad / u_restDensity;
                    sumSquareDerivOtherConstraint += dot(derivOtherConstraint, derivOtherConstraint);
                }
            }
        }
    }

    out_densities[id] = density;
    float C = density / u_restDensity - 1.0;
    float squareDerivThisConstraint = dot(derivThisConstraint, derivThisConstraint);
    out_lambdas[id] = - C / (squareDerivThisConstraint + sumSquareDerivOtherConstraint + 1e-4);
}