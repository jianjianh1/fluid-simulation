#version 460 core

layout(local_size_x = 1024) in;

layout(std430, binding = 0) readonly buffer block0
{
    vec4 in_positions[];
};

layout(std430, binding = 1) buffer block1
{
    uint inout_particlesCells[];
};

struct Boundary
{
    vec3 low;
    vec3 high;
};

uniform Boundary u_boundary;
uniform uvec3 u_gridResolution;

uint cellID(vec3 position)
{
    const vec3 diagonal = u_boundary.high - u_boundary.low;
    vec3 cellSize = diagonal / u_gridResolution;
    uvec3 cellIdx = uvec3((position - u_boundary.low) / cellSize);
    return cellIdx.x + u_gridResolution.x * cellIdx.y + u_gridResolution.x * u_gridResolution.y * cellIdx.z;
}

void main()
{
    vec3 position = in_positions[gl_GlobalInvocationID.x].xyz;
    uint cellIdx = cellID(position);
    atomicAdd(inout_particlesCells[cellIdx], 1);
}
